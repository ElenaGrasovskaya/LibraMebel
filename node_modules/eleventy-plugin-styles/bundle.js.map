{"version":3,"file":"bundle.js","sources":["../src/bundle.ts"],"sourcesContent":["import { promises } from 'fs';\nimport { join, resolve, dirname } from 'path';\n\nimport { rip } from './rip';\nimport { compile } from './compile';\nimport { normalize } from './normalize';\nimport { makeDirectories } from './mkdir';\nimport { done, oops, start } from './pretty';\nimport { StylesPluginOptions } from './types';\nimport { STYLESHEET_LINK_REGEXP } from './constants';\nimport { buildOutputUrl, pathStats, resolveFile } from './url';\n\ntype BundleOptions = Required<Omit<StylesPluginOptions, 'addWatchTarget'>>;\n\nconst findAndProcessFiles = (\n  html: string,\n  inputPath: string,\n  outputPath: string,\n  {\n    sassOptions,\n    cssnanoOptions,\n    postcssPlugins,\n    inputDirectory,\n    purgeCSSOptions,\n    publicDirectory,\n  }: BundleOptions\n) => {\n  const [buildDirectory, ...nestedHTMLPath] = pathStats(outputPath).directories;\n\n  return rip(html, STYLESHEET_LINK_REGEXP).map(\n    async (publicSourcePathToStyle) => {\n      start(`Start compiling \"${publicSourcePathToStyle}\" stylesheet.`);\n\n      const absolutePathToStyle = resolveFile(\n        publicSourcePathToStyle,\n        inputDirectory,\n        dirname(inputPath)\n      );\n      const publicOutputPathToStyle = buildOutputUrl(\n        publicSourcePathToStyle,\n        publicDirectory\n      );\n\n      const { css } = compile(absolutePathToStyle, sassOptions);\n\n      return normalize({\n        html,\n        css,\n        url: absolutePathToStyle,\n        cssnanoOptions,\n        purgeCSSOptions,\n        postcssPlugins,\n      })\n        .then(async ({ css }) => {\n          const pathToOutputFile = resolve(\n            buildDirectory,\n            publicOutputPathToStyle\n          );\n\n          return makeDirectories(dirname(pathToOutputFile)).then(() =>\n            promises.writeFile(pathToOutputFile, css, { encoding: 'utf-8' })\n          );\n        })\n        .then(() =>\n          done(\n            `Compiled CSS was written to \"${join(\n              buildDirectory,\n              publicOutputPathToStyle\n            )}\"`\n          )\n        )\n        .then(\n          () => ({\n            input: publicSourcePathToStyle,\n            output: join(\n              ...nestedHTMLPath.map(() => '..'),\n              publicOutputPathToStyle\n            ),\n          }),\n          oops\n        );\n    }\n  );\n};\n\nexport const bundle = async (\n  html: string,\n  inputPath: string,\n  outputPath: string,\n  {\n    sassOptions,\n    cssnanoOptions,\n    postcssPlugins,\n    inputDirectory,\n    purgeCSSOptions,\n    publicDirectory,\n  }: BundleOptions\n) =>\n  Promise.all(\n    findAndProcessFiles(html, inputPath, outputPath, {\n      sassOptions,\n      cssnanoOptions,\n      postcssPlugins,\n      inputDirectory,\n      purgeCSSOptions,\n      publicDirectory,\n    })\n  )\n    .then(\n      (array) =>\n        array.filter(Boolean) as ReadonlyArray<{\n          input: string;\n          output: string;\n        }>\n    )\n    .then(\n      (validUrls) => {\n        const htmlWithStyles = validUrls.reduce(\n          (text, { input, output }) => text.replace(input, output),\n          html\n        );\n\n        if (validUrls.length > 0) {\n          done('Public URLs of compiled styles were injected into HTML');\n        }\n\n        return htmlWithStyles;\n      },\n      (error) => (oops(error), html)\n    );\n"],"names":["async","html","inputPath","outputPath","sassOptions","cssnanoOptions","postcssPlugins","inputDirectory","purgeCSSOptions","publicDirectory","Promise","all","buildDirectory","nestedHTMLPath","pathStats","directories","rip","STYLESHEET_LINK_REGEXP","map","publicSourcePathToStyle","start","absolutePathToStyle","resolveFile","dirname","publicOutputPathToStyle","buildOutputUrl","css","compile","normalize","url","then","pathToOutputFile","resolve","makeDirectories","promises","writeFile","encoding","done","join","input","output","oops","findAndProcessFiles","array","filter","Boolean","validUrls","htmlWithStyles","reduce","text","replace","length","error"],"mappings":"wSAqFsBA,MACpBC,EACAC,EACAC,GAEEC,YAAAA,EACAC,eAAAA,EACAC,eAAAA,EACAC,eAAAA,EACAC,gBAAAA,EACAC,gBAAAA,KAGFC,QAAQC,IApFkB,EAC1BV,EACAC,EACAC,GAEEC,YAAAA,EACAC,eAAAA,EACAC,eAAAA,EACAC,eAAAA,EACAC,gBAAAA,EACAC,gBAAAA,MAGF,MAAOG,KAAmBC,GAAkBC,YAAUX,GAAYY,YAElE,OAAOC,MAAIf,EAAMgB,0BAAwBC,KACvClB,MAAOmB,IACLC,QAAM,oBAAoBD,kBAE1B,MAAME,EAAsBC,cAC1BH,EACAZ,EACAgB,UAAQrB,IAEJsB,EAA0BC,iBAC9BN,EACAV,IAGIiB,IAAEA,GAAQC,UAAQN,EAAqBjB,GAE7C,OAAOwB,YAAU,CACf3B,KAAAA,EACAyB,IAAAA,EACAG,IAAKR,EACLhB,eAAAA,EACAG,gBAAAA,EACAF,eAAAA,IAECwB,MAAK9B,OAAS0B,IAAAA,MACb,MAAMK,EAAmBC,UACvBpB,EACAY,GAGF,OAAOS,kBAAgBV,UAAQQ,IAAmBD,MAAK,IACrDI,WAASC,UAAUJ,EAAkBL,EAAK,CAAEU,SAAU,eAGzDN,MAAK,IACJO,OACE,gCAAgCC,OAC9B1B,EACAY,SAILM,MACC,MACES,MAAOpB,EACPqB,OAAQF,UACHzB,EAAeK,KAAI,IAAM,OAC5BM,MAGJiB,YAoBNC,CAAoBzC,EAAMC,EAAWC,EAAY,CAC/CC,YAAAA,EACAC,eAAAA,EACAC,eAAAA,EACAC,eAAAA,EACAC,gBAAAA,EACAC,gBAAAA,KAGDqB,MACEa,GACCA,EAAMC,OAAOC,WAKhBf,MACEgB,IACC,MAAMC,EAAiBD,EAAUE,QAC/B,CAACC,GAAQV,MAAAA,EAAOC,OAAAA,KAAaS,EAAKC,QAAQX,EAAOC,IACjDvC,GAOF,OAJI6C,EAAUK,OAAS,GACrBd,OAAK,0DAGAU,KAERK,IAAWX,OAAKW,GAAQnD"}