{"version":3,"file":"normalize.js","sources":["../src/normalize.ts"],"sourcesContent":["import purgecss from '@fullhuman/postcss-purgecss';\nimport autoprefixer from 'autoprefixer';\nimport postcss, { AcceptedPlugin } from 'postcss';\nimport cssnano, { CssNanoOptions } from 'cssnano';\n\nexport interface NormalizeStepOptions {\n  /** Path of source style file. */\n  url: string;\n  /** Compiled CSS. */\n  css: Buffer;\n  /** HTML content that has link to _css_. */\n  html: string;\n  /** Options to be passed to [`PurgeCSS`](https://purgecss.com/). */\n  purgeCSSOptions?: Parameters<typeof purgecss>[0];\n  /** Options to be passed to [`CSSNano`](https://cssnano.co/). */\n  cssnanoOptions?: CssNanoOptions;\n  /** Array of plugins that can be passed to [`PostCSS`](https://postcss.org). */\n  postcssPlugins?: ReadonlyArray<AcceptedPlugin>;\n}\n\n/**\n * Process compiled CSS in order to normalize it\n * according to current browsers usability.\n */\nexport const normalize = async ({\n  url: fromUrl,\n  css,\n  html,\n  purgeCSSOptions = {},\n  cssnanoOptions = {},\n  postcssPlugins = [],\n}: NormalizeStepOptions) => {\n  // Useful plugins for PostCSS configuration.\n  const plugins: any[] = [\n    ...postcssPlugins,\n    purgecss({\n      content: [{ raw: html, extension: 'html' }],\n      ...purgeCSSOptions,\n    }),\n    autoprefixer,\n    cssnano({ preset: 'default', ...cssnanoOptions }),\n  ];\n\n  return postcss(plugins).process(css, { from: fromUrl });\n};\n"],"names":["async","url","fromUrl","css","html","purgeCSSOptions","cssnanoOptions","postcssPlugins","plugins","purgecss","content","raw","extension","autoprefixer","cssnano","preset","postcss","process","from"],"mappings":"+SAwByBA,OACvBC,IAAKC,EACLC,IAAAA,EACAC,KAAAA,EACAC,gBAAAA,EAAkB,GAClBC,eAAAA,EAAiB,GACjBC,eAAAA,EAAiB,OAGjB,MAAMC,EAAiB,IAClBD,EACHE,yBACEC,QAAS,CAAC,CAAEC,IAAKP,EAAMQ,UAAW,UAC/BP,IAELQ,UACAC,yBAAUC,OAAQ,WAAcT,KAGlC,OAAOU,UAAQR,GAASS,QAAQd,EAAK,CAAEe,KAAMhB"}