{"version":3,"file":"compress_html_with_links.js","sources":["../src/compress_html_with_links.ts"],"sourcesContent":["import { join, dirname } from 'path';\n\nimport { rip } from './rip';\nimport { read } from './read';\nimport { gzip } from './gzip';\nimport { write } from './write';\nimport { brotli } from './brotli';\nimport { deflate } from './deflate';\nimport { isRelative } from './is_relative';\nimport { makeDirectories } from './mkdir';\nimport { CompressAlgorithm } from './types';\nimport { done, oops, start } from './pretty';\nimport { SCRIPTS_LINK_REGEXP, STYLESHEET_LINK_REGEXP } from './constants';\n\nconst COMPRESSOR_FUNCTIONS = {\n  gzip,\n  brotli,\n  deflate,\n} as const;\n\n/**\n * Perform compression of HTML file, styles\n * and scripts that are referenced by this HTML.\n */\nexport const compressHTMLWithLinks = async (\n  content: string,\n  outputPath: string,\n  algorithm: CompressAlgorithm | ReadonlyArray<CompressAlgorithm>,\n  buildDirectory: string\n) => {\n  const normalizeAlgorithms =\n    typeof algorithm === 'string' ? [algorithm] : algorithm;\n\n  const contents = [Promise.resolve({ data: content, url: outputPath })]\n    .concat(\n      rip(content, STYLESHEET_LINK_REGEXP).map((link) =>\n        read(\n          join(isRelative(link) ? dirname(outputPath) : buildDirectory, link)\n        )\n      )\n    )\n    .concat(\n      rip(content, SCRIPTS_LINK_REGEXP).map((link) =>\n        read(\n          join(isRelative(link) ? dirname(outputPath) : buildDirectory, link)\n        )\n      )\n    );\n\n  await Promise.all(\n    normalizeAlgorithms.map((compressAlgorithmName) => {\n      const compressor = COMPRESSOR_FUNCTIONS[compressAlgorithmName];\n\n      return Promise.all(\n        contents.map((info) =>\n          info.then(({ data, url }) => {\n            start(`Start to compress \"${url}\" file`);\n\n            makeDirectories(url)\n              .then(() => compressor(data, url))\n              .then(write)\n              .then(\n                () =>\n                  done(\n                    `\"${url}\" file was successfully compressed and written to disk`\n                  ),\n                oops\n              );\n          })\n        )\n      );\n    })\n  );\n};\n"],"names":["COMPRESSOR_FUNCTIONS","gzip","brotli","deflate","async","content","outputPath","algorithm","buildDirectory","normalizeAlgorithms","contents","Promise","resolve","data","url","concat","rip","STYLESHEET_LINK_REGEXP","map","link","read","join","isRelative","dirname","SCRIPTS_LINK_REGEXP","all","compressAlgorithmName","compressor","info","then","start","makeDirectories","write","done","oops"],"mappings":"oVAcA,MAAMA,EAAuB,MAC3BC,cACAC,iBACAC,yCAOmCC,MACnCC,EACAC,EACAC,EACAC,KAEA,MAAMC,EACiB,iBAAdF,EAAyB,CAACA,GAAaA,EAE1CG,EAAW,CAACC,QAAQC,QAAQ,CAAEC,KAAMR,EAASS,IAAKR,KACrDS,OACCC,MAAIX,EAASY,0BAAwBC,KAAKC,GACxCC,OACEC,OAAKC,aAAWH,GAAQI,UAAQjB,GAAcE,EAAgBW,OAInEJ,OACCC,MAAIX,EAASmB,uBAAqBN,KAAKC,GACrCC,OACEC,OAAKC,aAAWH,GAAQI,UAAQjB,GAAcE,EAAgBW,aAKhER,QAAQc,IACZhB,EAAoBS,KAAKQ,IACvB,MAAMC,EAAa3B,EAAqB0B,GAExC,OAAOf,QAAQc,IACbf,EAASQ,KAAKU,GACZA,EAAKC,MAAK,EAAGhB,KAAAA,EAAMC,IAAAA,MACjBgB,QAAM,sBAAsBhB,WAE5BiB,kBAAgBjB,GACbe,MAAK,IAAMF,EAAWd,EAAMC,KAC5Be,KAAKG,SACLH,MACC,IACEI,OACE,IAAInB,4DAERoB"}