{"version":3,"file":"generate_images.js","sources":["../src/generate_images.ts"],"sourcesContent":["import { resolve, join } from 'path';\n\nimport * as pwaAssetGenerator from 'pwa-asset-generator';\nimport { ManifestJsonIcon } from 'pwa-asset-generator/dist/models/result';\n\nimport { onceCached } from './once_cached';\nimport { makeDirectories } from './mkdir';\nimport { makeUrlFromRoot } from './build_public_url';\nimport { TransformOptions } from './types';\nimport { done, oops, start } from './pretty';\nimport {\n  DEFAULT_IMAGE_NAME,\n  DEFAULT_ICONS_DIRECTORY,\n  DEFAULT_SOURCE_DIRECTORY,\n} from './constants';\n\nexport type Options = Parameters<typeof pwaAssetGenerator.generateImages>[2];\nexport type LoggerFunction = Parameters<\n  typeof pwaAssetGenerator.generateImages\n>[3];\n\nexport interface GenerateImageOptions {\n  /** Path to the favicon file. */\n  input: string;\n  /** Path to directory of generated images. */\n  output: string;\n  /** An optional logger to log the result. */\n  logger: LoggerFunction;\n  /** Options for PWA image generator. */\n  options: Options;\n  publicDirectory: string;\n}\n\nexport interface ImageResult {\n  html: string;\n  manifestJsonContent: ReadonlyArray<ManifestJsonIcon>;\n}\n\n/**\n * Generate icon and splash screen images,\n * favicons and mstile images.\n */\nconst generateImages = async ({\n  input,\n  output,\n  logger,\n  options,\n  publicDirectory,\n}: GenerateImageOptions): Promise<ImageResult> =>\n  makeDirectories(output)\n    .then(() =>\n      pwaAssetGenerator.generateImages(\n        input,\n        output,\n        {\n          log: false,\n          mstile: true,\n          favicon: true,\n          pathOverride: makeUrlFromRoot(publicDirectory),\n          ...options,\n        },\n        logger\n      )\n    )\n    .then(({ htmlMeta, manifestJsonContent }) => ({\n      html: Object.values(htmlMeta).join(''),\n      manifestJsonContent,\n    }));\n\nexport const handleImages = onceCached(\n  ({\n    icons = {},\n    logger,\n    options,\n    buildDirectory,\n  }: Pick<TransformOptions, 'icons'> & { buildDirectory: string } & Pick<\n      GenerateImageOptions,\n      'logger' | 'options'\n    >) => {\n    start('Starting icons generation');\n\n    const absolutePathToRawImage = resolve(\n      icons.pathToRawImage ?? join(DEFAULT_SOURCE_DIRECTORY, DEFAULT_IMAGE_NAME)\n    );\n    const outputIconsDirectory = resolve(\n      buildDirectory,\n      icons.publicDirectory ?? DEFAULT_ICONS_DIRECTORY\n    );\n\n    return generateImages({\n      input: absolutePathToRawImage,\n      output: outputIconsDirectory,\n      publicDirectory: icons.publicDirectory ?? DEFAULT_ICONS_DIRECTORY,\n      options,\n      logger,\n    }).then(\n      (info) => {\n        done('Icons for PWA were successfully generated');\n        return info;\n      },\n      (error) => {\n        oops(error);\n        return { html: '', manifestJsonContent: [] };\n      }\n    );\n  }\n);\n"],"names":["handleImages","onceCached","icons","logger","options","buildDirectory","start","async","input","output","publicDirectory","makeDirectories","then","pwaAssetGenerator","generateImages","log","mstile","favicon","pathOverride","makeUrlFromRoot","htmlMeta","manifestJsonContent","html","Object","values","join","resolve","pathToRawImage","DEFAULT_SOURCE_DIRECTORY","DEFAULT_IMAGE_NAME","DEFAULT_ICONS_DIRECTORY","info","done","error","oops"],"mappings":"mjBA0CA,MA2BaA,EAAeC,cAC1B,EACEC,MAAAA,EAAQ,GACRC,OAAAA,EACAC,QAAAA,EACAC,eAAAA,gBAKAC,QAAM,6BAUN,MA/CmBC,QACrBC,MAAAA,EACAC,OAAAA,EACAN,OAAAA,EACAC,QAAAA,EACAM,gBAAAA,KAEAC,kBAAgBF,GACbG,MAAK,IACJC,EAAkBC,eAChBN,EACAC,iBAEEM,KAAK,EACLC,QAAQ,EACRC,SAAS,EACTC,aAAcC,kBAAgBT,IAC3BN,GAELD,KAGHS,MAAK,EAAGQ,SAAAA,EAAUC,oBAAAA,OACjBC,KAAMC,OAAOC,OAAOJ,GAAUK,KAAK,IACnCJ,oBAAAA,MAuBKP,CAAe,CACpBN,MAT6BkB,oBAC7BxB,EAAMyB,8BAAkBF,OAAKG,2BAA0BC,uBASvDpB,OAP2BiB,UAC3BrB,YACAH,EAAMQ,+BAAmBoB,2BAMzBpB,0BAAiBR,EAAMQ,+BAAmBoB,0BAC1C1B,QAAAA,EACAD,OAAAA,IACCS,MACAmB,IACCC,OAAK,6CACED,KAERE,IACCC,OAAKD,GACE,CAAEX,KAAM,GAAID,oBAAqB"}