{"version":3,"file":"once_cached.js","sources":["../src/once_cached.ts"],"sourcesContent":["/**\n * Executes function only once.\n * If there will be multiple invocations,\n * then cached result will be returned.\n */\nexport const onceCached = <F extends (...args: ReadonlyArray<any>) => any>(\n  fn: F\n): F => {\n  const uniqueSymbol = Symbol();\n  let cache: ReturnType<F> | symbol = uniqueSymbol;\n\n  return ((...args: Parameters<F>) =>\n    cache !== uniqueSymbol\n      ? (cache as ReturnType<F>)\n      : (cache = fn(...args) as ReturnType<F>)) as F;\n};\n"],"names":["fn","uniqueSymbol","Symbol","cache","args"],"mappings":"uFAMEA,IAEA,MAAMC,EAAeC,SACrB,IAAIC,EAAgCF,EAEpC,UAAYG,IACVD,IAAUF,EACLE,EACAA,EAAQH,KAAMI"}