{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import { join } from 'path';\n\nimport { generateSW, GenerateSWConfig } from 'workbox-build';\n\nimport { toMegabytes } from './to_megabytes';\nimport { joinUrlParts } from './url';\nimport { isProduction } from './mode';\nimport { getBuildDirectory } from './path_stats';\nimport { bold, done, oops, start } from './pretty';\nimport { makeManifestURlsAbsolute } from './transform_entries';\nimport { buildSWScriptRegistration } from './injectable_script';\nimport {\n  EXTENSIONS,\n  PLUGIN_NAME,\n  URL_DELIMITER,\n  STATIC_FORMATS,\n} from './constants';\n\nexport interface EleventyPluginWorkboxOptions {\n  /**\n   * Options that will be passed to\n   * [`generateSW` function](https://developers.google.com/web/tools/workbox/reference-docs/latest/module-workbox-build#.generateSW).\n   */\n  generateSWOptions?: GenerateSWConfig;\n  /**\n   * Directory inside _output_ folder to be used as place for\n   * service worker.\n   */\n  publicDirectory?: string;\n  /**\n   * Scope for service worker.\n   */\n  scope?: string;\n  /**\n   * Tells if plugin should generate service worker.\n   * Useful for situations when there is a need to test service worker,\n   * especially in development process.\n   *\n   * By default it is enabled if `NODE_ENV === 'production'`.\n   */\n  enabled?: boolean;\n}\n\n/**\n * Generate service worker for caching project's files.\n * In _build_ directory will be generated one file for this.\n * Script for registering generated service worker will be\n * automatically included into HTML.\n *\n * Note that if you set listeners to `afterBuild` event\n * in your Eleventy build pipeline, then this plugin should\n * be the last one.\n */\nexport const cache = (\n  /** Eleventy config object. */\n  config: Record<string, Function>,\n  {\n    scope = URL_DELIMITER,\n    enabled = isProduction(),\n    publicDirectory = '',\n    generateSWOptions,\n  }: EleventyPluginWorkboxOptions = {}\n) => {\n  if (enabled) {\n    const serviceWorkerPublicUrl = joinUrlParts(\n      publicDirectory,\n      'service-worker.js'\n    );\n\n    // Holds name of output directory.\n    let outputDirectory: string;\n\n    config.addTransform(\n      'service-worker',\n      function (\n        this: { outputPath: string },\n        content: string,\n        outputPath: string\n      ) {\n        outputDirectory ??= getBuildDirectory(this.outputPath ?? outputPath);\n\n        if (outputPath.endsWith('html')) {\n          const htmlWithServiceWorker = content.replace(\n            '</head>',\n            buildSWScriptRegistration(serviceWorkerPublicUrl, scope) + '</head>'\n          );\n\n          done(\n            `Service worker registration script is injected into \"${bold(\n              this.outputPath ?? outputPath\n            )}\"`\n          );\n\n          return htmlWithServiceWorker;\n        }\n\n        return content;\n      }\n    );\n\n    config.on('afterBuild', () =>\n      Promise.resolve(start('Generation of service worker has started.'))\n        .then(() =>\n          generateSW({\n            cacheId: 'EleventyPlugin' + PLUGIN_NAME,\n            swDest: join(outputDirectory, serviceWorkerPublicUrl),\n            sourcemap: !isProduction(),\n            skipWaiting: true,\n            globPatterns: [`*.{${EXTENSIONS}}`, `**/*.{${EXTENSIONS}}`],\n            clientsClaim: true,\n            directoryIndex: 'index.html',\n            globDirectory: outputDirectory,\n            inlineWorkboxRuntime: true,\n            cleanupOutdatedCaches: true,\n            runtimeCaching: [\n              {\n                handler: 'NetworkFirst',\n                urlPattern: ({ url }: { url: string }) =>\n                  !new RegExp(\n                    `.+\\\\.(?:${[\n                      'jpg',\n                      'png',\n                      'gif',\n                      'ico',\n                      'svg',\n                      'jpeg',\n                      'avif',\n                      'webp',\n                      'eot',\n                      'ttf',\n                      'otf',\n                      'ttc',\n                      'woff',\n                      'woff2',\n                    ].join('|')})`\n                  ).test(url),\n              },\n              {\n                handler: 'StaleWhileRevalidate',\n                urlPattern: new RegExp(`.+\\\\.(?:${STATIC_FORMATS.join('|')})$`),\n              },\n            ],\n            manifestTransforms: [makeManifestURlsAbsolute],\n            ...(generateSWOptions ?? {}),\n          })\n        )\n        .then(\n          ({ size, count }) =>\n            done(\n              `${bold(count)} files will be precached, totaling ${bold(\n                toMegabytes(size)\n              )} MB.`\n            ),\n          oops\n        )\n    );\n  }\n};\n"],"names":["config","scope","URL_DELIMITER","enabled","isProduction","publicDirectory","generateSWOptions","serviceWorkerPublicUrl","joinUrlParts","outputDirectory","addTransform","content","outputPath","getBuildDirectory","this","endsWith","htmlWithServiceWorker","replace","buildSWScriptRegistration","done","bold","on","Promise","resolve","start","then","generateSW","cacheId","PLUGIN_NAME","swDest","join","sourcemap","skipWaiting","globPatterns","EXTENSIONS","clientsClaim","directoryIndex","globDirectory","inlineWorkboxRuntime","cleanupOutdatedCaches","runtimeCaching","handler","urlPattern","url","RegExp","test","STATIC_FORMATS","manifestTransforms","makeManifestURlsAbsolute","size","count","toMegabytes","oops"],"mappings":"yWAqDqB,CAEnBA,GAEEC,MAAAA,EAAQC,gBACRC,QAAAA,EAAUC,iBACVC,gBAAAA,EAAkB,GAClBC,kBAAAA,GACgC,MAElC,GAAIH,EAAS,CACX,MAAMI,EAAyBC,eAC7BH,EACA,qBAIF,IAAII,EAEJT,EAAOU,aACL,kBACA,SAEEC,EACAC,WAIA,GAFAH,MAAAA,IAAAA,EAAoBI,8BAAkBC,KAAKF,0BAAcA,IAErDA,EAAWG,SAAS,QAAS,CAC/B,MAAMC,EAAwBL,EAAQM,QACpC,UACAC,4BAA0BX,EAAwBN,GAAS,WAS7D,OANAkB,OACE,wDAAwDC,iBACtDN,KAAKF,0BAAcA,OAIhBI,EAGT,OAAOL,KAIXX,EAAOqB,GAAG,cAAc,IACtBC,QAAQC,QAAQC,QAAM,8CACnBC,MAAK,IACJC,4BACEC,QAAS,iBAAmBC,cAC5BC,OAAQC,OAAKrB,EAAiBF,GAC9BwB,WAAY3B,iBACZ4B,aAAa,EACbC,aAAc,CAAC,MAAMC,gBAAe,SAASA,iBAC7CC,cAAc,EACdC,eAAgB,aAChBC,cAAe5B,EACf6B,sBAAsB,EACtBC,uBAAuB,EACvBC,eAAgB,CACd,CACEC,QAAS,eACTC,WAAY,EAAGC,IAAAA,MACZ,IAAIC,OACH,WAAW,CACT,MACA,MACA,MACA,MACA,MACA,OACA,OACA,OACA,MACA,MACA,MACA,MACA,OACA,SACAd,KAAK,SACPe,KAAKF,IAEX,CACEF,QAAS,uBACTC,WAAY,IAAIE,OAAO,WAAWE,iBAAehB,KAAK,YAG1DiB,mBAAoB,CAACC,6BACjB1C,MAAAA,EAAAA,EAAqB,OAG5BmB,MACC,EAAGwB,KAAAA,EAAMC,MAAAA,KACP/B,OACE,GAAGC,OAAK8B,wCAA4C9B,OAClD+B,cAAYF,YAGlBG"}